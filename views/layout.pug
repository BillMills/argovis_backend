doctype html
html(lang='en')
    head
        title= title
        meta(charset='utf-8')
        meta(name='viewport', content='width=device-width, initial-scale=1')
        link(rel='stylesheet', href='/stylesheets/leaflet.css')
        link(rel='stylesheet', href='/stylesheets/style.css')
        link(rel='stylesheet', href='/stylesheets/leaflet-draw.css')
        script(src='/javascripts/jquery.min.js')

        script(src="/javascripts/leaflet.js")
        script(src="/javascripts/leaflet.draw.js")
        link(rel='stylesheet', href='/stylesheets/bootstrap.min.css')
        script(src='/javascripts/bootstrap.min.js')

        //used for jquery date range
        script(type="text/javascript", src="javascripts/moment.min.js")
        script(type="text/javascript", src="javascripts/daterangepicker.js")
        link(rel="stylesheet" type="text/css", href="stylesheets/daterangepicker.css")
        
        script(type="text/javascript", src="javascripts/nouislider.js")
        link(rel="stylesheet" type="text/css", href="stylesheets/nouislider.css")

        //used for map projections
        script(type="text/javascript", src="javascripts/proj4.js")
        script(type="text/javascript", src="javascripts/proj4leaflet.js")
        script(src='/javascripts/leaflet.ajax.min.js')
    body
      script(type='text/javascript').

        //var $j = jQuery.noConflict();

        $( document ).ready(function() {
          const start = moment().subtract(15, 'days');
          const end = moment();
          //define daterange picker
          $('input[name="daterange"]').daterangepicker(
            {
            startDate: start,
            endDate: end,
            locale: {
                format: 'MM/DD/YYYY'
            },
            //dateLimit: {
            //   days: 60
            //},
            alwaysShowCalendars: false,
            minDate: "01/01/1997",
            ranges: {
              'Today': [moment(), moment()],
              'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
              'Last 7 Days': [moment().subtract(6, 'days'), moment()],
              'Last 30 Days': [moment().subtract(29, 'days'), moment()],
              'This Month': [moment().startOf('month'), moment().endOf('month')],
              'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
              }
            },
            function(start, end, label) {
                if (drawnItems) { shapeSelectionOnMap() }
            }
          );

          var slider = document.getElementById('slider');
          var minPres = document.getElementById('minPres');
          var maxPres = document.getElementById('maxPres');
          //define slider
          noUiSlider.create(slider, {
            start: [0, 2000],
            range: { min: 0, max: 6000 },
            step: 1,
            connect: true,
            orientation: 'vertical'
          });

          slider.noUiSlider.on('change', function(){
            if (drawnItems) { shapeSelectionOnMap() }
          });
          //bind slider values to min and max pressure inputs
          var bindValues = function() {
            slider.noUiSlider.on('update', function( values, handle ) {
              var value = values[handle];
              if ( handle ) {
                maxPres.value = value;
              } else {
                minPres.value = value;
              }
            });
            minPres.addEventListener('change', function(){
              slider.noUiSlider.set([this.value, null]);
            });
            maxPres.addEventListener('change', function(){
              slider.noUiSlider.set([null, this.value]);
            });
          }
          bindValues()
          //define functions used to update map
          var getDateRange = function() {
            // Extract dates from daterange picker
            let dates = {}
            var startDate = $('#daterange').data('daterangepicker').startDate._d;
            var endDate = $('#daterange').data('daterangepicker').endDate._d;
            startDate = moment(startDate).format('YYYY-MM-DD');
            endDate = moment(endDate).format('YYYY-MM-DD');
            dates.startDate = startDate;
            dates.endDate = endDate;
            return(dates)
            };
          
          var getPresRange = function() {
            let maxPres = document.getElementById('maxPres').value;
            let minPres = document.getElementById('minPres').value;
            maxPres = Math.round(maxPres);
            minPres = Math.round(minPres);
            var presRange = [minPres, maxPres];
            return(presRange);
            };

          var shapeSelectionOnMap = function(){
              const dates = getDateRange();
              var presRange = getPresRange();
              // Extract GeoJson from featureGroup
              if (drawnItems) {
                  let data = drawnItems.toGeoJSON();
                  let features = data.features;
                  platformProfileMarkersLayer.clearLayers(); //delete platform profiles
                  markersLayer.clearLayers();
                  let base = '/selection/profiles/map'
                  for (let i = 0; i < features.length; i++) {
                      const shape = features[i].geometry.coordinates;
                      const transformedShape = getTransformedShape(shape)
                      let urlQuery = base+'?startDate='+dates.startDate+'&endDate='+dates.endDate+'&presRange='+JSON.stringify(presRange)+'&shape='+JSON.stringify([transformedShape]);
                      displayProfiles(urlQuery);
                  }
              }
          }

          map.on(L.Draw.Event.CREATED, function (event) {
              var layer = event.layer;
              popupWindowCreation(layer);
              shapeSelectionOnMap()
          });

          map.on('draw:edited', function (e) {
              var layers = e.layers;
              layers.eachLayer(function (layer) {
                  popupWindowCreation(layer)
              });
              shapeSelectionOnMap()
          });

          var shapeSelection = function(presQuery, shape) {
              let base = '/selection/profiles/page'
              let dates = getDateRange();
              if (JSON.parse(presQuery)==true) {
                  let presRange = getPresRange();
                  var urlQuery = base+'?presRange='+JSON.stringify(presRange)+'&startDate='+dates.startDate+'&endDate='+dates.endDate+'&shape='+JSON.stringify([shape]);
              }
              else {
                  var urlQuery = base+'?startDate='+dates.startDate+'&endDate='+dates.endDate+'&shape='+JSON.stringify([shape]);
              }
              window.open(urlQuery,'_blank');
          }

          const popupWindowCreation = function(layer){
              let layerCoords = layer.toGeoJSON();
              const shape = layerCoords.geometry.coordinates;
              const transformedShape = getTransformedShape(shape);

              const selectionButton = "<input type='button' value='To selection page' onclick='shapeSelection("+'false'+","+JSON.stringify(transformedShape)+")'>"
              const presSelectionButton = "<input type='button' value='To selection page with pressure query' onclick='shapeSelection("+'true'+","+JSON.stringify(transformedShape)+")'>"    
              const popupText = '<b> Hello, im a shape! </b>'
                                  +'<br>' + selectionButton + '</b>'
                                  +'<br>' + presSelectionButton + '</b>'
              let container = $('<div />');
              container.html(popupText);        
              layer.bindPopup(container[0]);
              layer.on('add', function() { layer.openPopup(); });
              //layer.on('mouseout', function() { layer.closePopup(); });
              drawnItems.addLayer(layer);
          }

          map.on('mousemove', function (e) {
              info._div.innerHTML = 'Longitude: ' + e.latlng.lng.toFixed(2) + '<br />' +
                                      'Latitude: ' + e.latlng.lat.toFixed(2);
          });

          var info = L.control({position: 'topright'});

          info.onAdd = function (map) {
              this._div = L.DomUtil.create('div', 'info'); // create a div with a class "info"
              return this._div;
          };


          info.addTo(map);
        });


      div(class='container-fluid')
        div(class='row')
          div(class='col-sm-2')
            block sidebar
              ul(class='sidebar-nav')
                li 
                  a(href='/map') Web Mercator Map
                li
                  a(href='/mapNPS') Northern Polar Stereo Map
                li
                  a(href='/mapSPS') Southern Polar Stereo Map
                li
                  a(href='/catalog/dacs') Database summary
                li
                  hr
                li
                  input(type="text", name="daterange", id="daterange", class='date')
                li
                  a(href='/selection/lastProfiles') Last profiles reported 
                li
                  div(class='col-sm-2', id='slider-div')
                    div(id='slider')
                  div(class='col-sm-2', id='input-div')
                    label(id='minPresLabel', for='minPres') Low pressure:
                    input(type="number", value="0" min="0" max="6000" id='minPres')
                    label(id='maxPresLabel', for='maxPres') High pressure:
                    input(type="number" value="2000" min="0" max="6000" id='maxPres')
                li
                  button.btn.btn-primary.btn-block(type='submit', id='latestProfileSelection') Reset to Last 1000 profiles
          div(class='col-sm-10')
            block content
