doctype html
html(lang='en')
    head
        title=title
        meta(charset='utf-8')
        link(rel='stylesheet', href='/stylesheets/style.css')
        script(type="text/javascript", src='https://cdn.plot.ly/plotly-latest.min.js')
        link(rel='stylesheet', href='/stylesheets/bootstrap.min.css')
        script(src='/javascripts/FileSaver.min.js')
        script(src='/javascripts/jquery.min.js')
        script(src='/javascripts/bootstrap.min.js')
        script(src='/javascripts/tableexport.min.js')
        link(rel='stylesheet', href='tableexport.min.css')
    body

    block content
        div(class='left')
            #PRES_V_TEMP_PLOT
        div(class='middle')
            #PRES_V_PSAL_PLOT
        div(class='right')
            #TEMP_V_PSAL_PLOT
        button.btn.btn-primary.btn-block(type='submit', id='downloadProfiles') Download selected data
        div
        table(class="table table-striped")
            thead
                tr
                    th Raw Data
                    th Dac
                    th Link to profile page
                    th Date reported
                    th Cycle number
                    th Number of measurements
            tbody(overflow='auto', height='150px')
                each profile, i in JSON.parse(profiles)
                    tr
                        td 
                          a(href=profile.nc_url) #{profile._id} data
                        td #{profile.dac}
                        td 
                          a(href='/catalog/profiles/'+profile._id + '/page' target='_blank') #{profile._id} page
                        td #{moment(profile.date).format("YYYY-MM-DD HH:mm")}
                        td #{profile.cycle_number}
                        td #{profile.measurements.length}

    script(type='text/javascript').

        TableExport(document.getElementsByTagName("table"), {
            headers: true,                              // (Boolean), display table headers (th or td elements) in the <thead>, (default: true)
            footers: true,                              // (Boolean), display table footers (th or td elements) in the <tfoot>, (default: false)
            formats: ['csv', 'xlsx', 'xls', 'txt'],             // (String[]), filetype(s) for the export, (default: ['xls', 'csv', 'txt'])
            filename: 'selection_table',                             // (id, String), filename for the downloaded file, (default: 'id')
            bootstrap: true,                           // (Boolean), style buttons using bootstrap, (default: true)
            exportButtons: true,                        // (Boolean), automatically generate the built-in export buttons for each of the specified formats (default: true)
            position: 'bottom',                         // (top, bottom), position of the caption element relative to table, (default: 'bottom')
            ignoreRows: null,                           // (Number, Number[]), row indices to exclude from the exported file(s) (default: null)
            ignoreCols: null,                           // (Number, Number[]), column indices to exclude from the exported file(s) (default: null)
            trimWhitespace: true                        // (Boolean), remove all leading/trailing newlines, spaces, and tabs from cell text in the exported file(s) (default: false)
        });

        $('#downloadProfiles').on('click', function(){
            const data = JSON.stringify(!{profiles});
            const blob = new Blob([data], {type: "application/json"});
            const saveAs = window.saveAs;
            const filename = 'selected_profiles.json';
            saveAs(blob, filename);
        });

    script(type='text/javascript').
        
        let profiles = !{profiles};

        const collateProfileMeasurements = function(profile) {
            var map = {};
            let num_measurements = profile.length;
            map.pres = new Array(num_measurements);
            map.temp = new Array(num_measurements);
            map.psal = new Array(num_measurements);
            for (var i = 0; i < num_measurements; ++i) {
                map.pres[i] = profile[i].pres;
                map.temp[i] = profile[i].temp;
                map.psal[i] = profile[i].psal;
            }
            return map;
        }

        const makeText = function(profile_id) {
                return("<br> " + text + value.toFixed(3).toString()
                     + "<br>click to see profile page"
                )
        };

        const makeTrace = function(xvalues, yvalues, cvalues, profile_ids, plot_name) {
            scatterGlTrace = {
                y: yvalues,
                x: xvalues,
                text: profile_ids.map(makeText),
                showlegend: false,
                type: 'scattergl',
                mode: 'markers',
                profile_ids: profile_ids,
                marker: { color: cvalues,
                            size: 6,
                            symbol: 'dot',
                            opacity: 1,
                        },
                name: plot_name, 
            }
            return [scatterGlTrace]
        };

        let traces = [];
        let temp = [];
        let pres = [];
        let psal = [];
        let _ids = [];
        let cvalues = [];

        for(var i=0; i < profiles.length; i++) {
            let profile = profiles[i].measurements;
            profile = collateProfileMeasurements(profile); // collect points into arrays
            let _id = profiles[i]._id

            id_array = new Array(profile.length);
            color_array = new Array(profile.length)
            for (j=0; j< profile.length; ++j) {
                id_array[j] = _id;
                color_array[j] = i;
            }

            temp.concat(profile.temp);
            pres.concat(profile.pres);
            pres.concat(profile.psal);
            cvalues.concat(color_array);
            _ids.concat(id_array);
        }


        //create traces.
        pres_v_temp_trace = makeTrace(temp, pres, cvalues, cvalues, _ids, 'pres_v_temp')
        pres_v_psal_trace = makeTrace(psal, pres, cvalues, cvalues, _ids, 'pres_v_temp')
        temp_v_psal_trace = makeTrace(psal, temp, cvalues, cvalues, _ids, 'pres_v_temp')
        
        //create layouts.
        const pres_v_temp_layout = {
            title: "Pressure vs Temperature",
            autosize: true,
            height: 500, 
            width: 400,
            xaxis: {
                autorange: true, 
                title: "Temperature [Celsius]"
            },
            yaxis: {
                showticklabels: true,
                autorange: true,
                type: "linear",
                title: "Pressure [dbar]"
            },
            hovermode: "closest", 
            showlegend: false
        };

        const pres_v_psal_layout = {
            title: "Pressure vs Salinity",
            autosize: true,
            height: 500, 
            width: 400,
            xaxis: {
                autorange: true, 
                title: "Salinity [ppm]"
            },
            yaxis: {
                showticklabels: true,
                autorange: true,
                type: "linear",
                title: "Pressure [dbar]"
            },
            hovermode: "closest", 
            showlegend: false
        };
        const temp_v_psal_layout = {
            title: "Temperature vs Salinity",
            autosize: true,
            height: 500, 
            width: 400,
            xaxis: {
                autorange: true, 
                title: "Salinity [ppm]"
            },
            yaxis: {
                showticklabels: true,
                autorange: true,
                type: "linear",
                title: "Temperature [Celsius]"
            }, 
            hovermode: "closest", 
            showlegend: false
        };
        
        Plotly.plot('PRES_V_TEMP_PLOT',
                    pres_v_temp_trace,
                    pres_v_temp_layout);
        Plotly.plot('PRES_V_PSAL_PLOT',
                    pres_v_psal_trace,
                    pres_v_psal_layout);
        Plotly.plot('TEMP_V_PSAL_PLOT',
                    temp_v_psal_trace,
                    temp_v_psal_layout);

         // Upon click a new tab opens to the corresponding profile.
        PRES_V_TEMP_PLOT.on('plotly_click', function(data){
            var profile_id = data.points[0].data.profile_ids;
            var url = '/catalog/profiles/' + profile_id + '/page'
            window.open(url,'_blank');
        });
