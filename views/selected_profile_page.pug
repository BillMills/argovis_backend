doctype html
html(lang='en')
    head
        title=title
        meta(charset='utf-8')
        link(rel='stylesheet', href='/stylesheets/style.css')
        script(type="text/javascript", src='https://cdn.plot.ly/plotly-latest.min.js')
        link(rel='stylesheet', href='/stylesheets/bootstrap.min.css')
        script(src='/javascripts/FileSaver.min.js')
        script(src='/javascripts/jquery.min.js')
        script(src='/javascripts/bootstrap.min.js')
        script(src='/javascripts/tableexport.min.js')
    body

    block content
        #DISPLAY_SELECTION_PROFILES
        button.btn.btn-primary.btn-block(type='submit', id='downloadProfiles') Download selected data
        div
        table(class="table table-striped")
            thead
                tr
                    th Raw Data
                    th Dac
                    th Parameters
                    th Link to profile page
                    th Date reported
                    th Cycle number
                    th Number of measurements
            tbody(overflow='auto', height='150px')
                each profile, i in JSON.parse(profiles)
                    tr
                        td 
                          a(href=profile.nc_url) #{profile._id} data
                        td #{profile.dac}
                        td #{profile.station_parameters}
                        td 
                          a(href='/catalog/profiles/'+profile._id + '/page' target='_blank') #{profile._id} page
                        td #{moment(profile.date).format("YYYY-MM-DD HH:mm")}
                        td #{profile.cycle_number}
                        td #{profile.measurements.length}

    script(type='text/javascript').

        TableExport(document.getElementsByTagName("table"), {
            headers: true,                              // (Boolean), display table headers (th or td elements) in the <thead>, (default: true)
            footers: true,                              // (Boolean), display table footers (th or td elements) in the <tfoot>, (default: false)
            formats: ['csv', 'xlsx', 'xls', 'txt'],             // (String[]), filetype(s) for the export, (default: ['xls', 'csv', 'txt'])
            filename: 'selection_table',                             // (id, String), filename for the downloaded file, (default: 'id')
            bootstrap: true,                           // (Boolean), style buttons using bootstrap, (default: true)
            exportButtons: true,                        // (Boolean), automatically generate the built-in export buttons for each of the specified formats (default: true)
            position: 'bottom',                         // (top, bottom), position of the caption element relative to table, (default: 'bottom')
            ignoreRows: null,                           // (Number, Number[]), row indices to exclude from the exported file(s) (default: null)
            ignoreCols: null,                           // (Number, Number[]), column indices to exclude from the exported file(s) (default: null)
            trimWhitespace: true                        // (Boolean), remove all leading/trailing newlines, spaces, and tabs from cell text in the exported file(s) (default: false)
        });

        $('#downloadProfiles').on('click', function(){
            var url = `#{url}`;
            url = url.replace(/&amp;/g, '&');
            url = url.replace('page', 'json');
            console.log(url);
            window.open(url,'_blank');
        });

    script(type='text/javascript').
        
        let profiles = !{profiles};
        let traces = [];

        function collateMeasurements(list) {
                var map = {};
            var keys = Object.keys(list[0]);
            map.pres = [];
            map.temp = [];
            map.psal = [];

            for (var i = 0; i < list.length; ++i) {
                map.pres.push(list[i].pres);
                map.temp.push(list[i].temp);
                map.psal.push(list[i].psal);
            }
            return map;
        }
        const reduceProfileMeasurements = function(combinedProfiles, n) {
            var reducedProfiles = {}

            reducedProfiles.pres = [];
            reducedProfiles.temp = [];
            reducedProfiles.psal = [];

            for(let i = 0; i < combinedProfiles.pres.length; i+=n) {
                reducedProfiles.pres.push(combinedProfiles.pres[i]);
                reducedProfiles.temp.push(combinedProfiles.temp[i]);
                reducedProfiles.psal.push(combinedProfiles.psal[i]);
            }
            return reducedProfiles;
            }
        const makeTrace =function(key, measurement) {
            let trace_info = measurement[key];
            return {
                y: trace_info.yvalues,
                x: trace_info.xvalues,
                text: 'click to see profile page',
                xaxis: trace_info.xaxis,
                yaxis: trace_info.yaxis,
                showlegend: true,
                type: 'scatter',
                name: 'ID: '+trace_info.platform_id,
            };
        };

        for(var i=0; i < profiles.length; i++) {
            let profile = profiles[i].measurements;
            const _id = profiles[i]._id
            profile = collateMeasurements(profile); // collect points into arrays
            profile = reduceProfileMeasurements(profile, 5);  // plot every n measurements
            // prep arrays to be changed into traces
            const measurement = {'temp_v_psal': {'yvalues': profile.temp, 'xvalues': profile.psal, 'yaxis': 'y1', 'xaxis': 'x1', 'platform_id': _id},
                                 'pres_v_psal': {'yvalues': profile.pres, 'xvalues': profile.psal, 'yaxis': 'y2', 'xaxis': 'x2', 'platform_id': _id},
                                 'pres_v_temp': {'yvalues': profile.pres, 'xvalues': profile.temp, 'yaxis': 'y3', 'xaxis': 'x3', 'platform_id': _id}
                                };
            //create traces.
            meas_traces = ['pres_v_temp', 'pres_v_psal', 'temp_v_psal'].map(function(key) { return makeTrace(key, measurement)})
            //add traces to array.
            traces = traces.concat(meas_traces)
        };

        const layout = {
            title: "Profile measurements",
            autosize: true,
            height: 500, 
            width: 1200, 

            xaxis3: {
                domain: [0, 0.266],
                autorange: true,
                title: "Temperature [Celsius]"
            }, 
            xaxis2: {
                domain: [.366, 0.633],
                autorange: true,
                title: "Salinity [psi]"
            }, 
            xaxis: {
                domain: [.733, 1],
                autorange: true, 
                title: "Salinity [psi]"
            },
            
            yaxis3: {
                anchor: "x3",
                showticklabels: true,
                autorange: 'reversed', //reversing axis causes tick labels to dissapear
                type: "linear",
                title: "Pressure [dbar]"
            },  
            
            yaxis2: {
                autorange: 'reversed',
                anchor: "x2",
                type: "linear",
                title: "Pressure [dbar]",
                showticklabels: true,
            }, 
            yaxis: {
                anchor: "x1",
                showticklabels: true,
                autorange: true,
                type: "linear",
                title: "Temperature [Celsius]"
            }, 
            hovermode: "closest", 
            showlegend: false
        };

        Plotly.plot('DISPLAY_SELECTION_PROFILES',
                    traces,
                    layout);

         // Upon click a new tab opens to the corresponding profile.
        DISPLAY_SELECTION_PROFILES.on('plotly_click', function(data){
            let x_idx = data.points[0].pointNumber
            var profile_id = data.points[0].data.name.replace('ID: ', '');
            var url = '/catalog/profiles/' + profile_id + '/page'
            window.open(url,'_blank');
        });
