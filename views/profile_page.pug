doctype html
html(lang='en')
    head
        title=title
        meta(charset='utf-8')
        link(rel='stylesheet', href='/stylesheets/style.css')
        script(type="text/javascript", src='https://cdn.plot.ly/plotly-latest.min.js')
        link(rel='stylesheet', href='/stylesheets/external-css/bootstrap.css')
        script(src='/javascripts/external-js/FileSaver.min.js')
        script(src='/javascripts/external-js/jquery.min.js')
        script(src='/javascripts/external-js/bootstrap.min.js')
    body

    block content
        div(class='selection_and_catalog_page')
            h1 Profile Id: #{title}
            p Date: #{moment(profile.date).format("YYYY-MM-DD HH:mm")}
            p Cycle number: #{profile.cycle_number}
            p Latitude: #{profile.roundLat}
            p Longitude: #{profile.roundLon}
            p Dac: #{profile.dac}
            p Parameters: #{profile.station_parameters}
            p Positioning system: #{profile.POSITIONING_SYSTEM}
            p Platform type: #{profile.PLATFORM_TYPE}
            p Data mode: #{profile.DATA_MODE}
            p Data source:
            a(href=profile.nc_url) #{profile.nc_url}
            p
            a(href='/catalog/platforms/'+ platform_number + '/page' target='_blank') To platform #{profile.platform_number} page
            div
            a(href='/map' ) To main page
            #TPS_CHART
            button.btn.btn-primary.btn-block(type='submit', id='downloadProfiles') Download data as JSON

    script(type='text/javascript').

        $('#downloadProfiles').on('click', function(){
            var url = '/catalog/profiles/' + `#{title}`;
            window.open(url,'_blank');
        });

        function collateMeasurements(list) {
                var map = {};
            var keys = Object.keys(list[0]);
            map.pres = [];
            map.temp = [];
            map.psal = [];

            for (var i = 0; i < list.length; ++i) {
                map.pres.push(list[i].pres);
                map.temp.push(list[i].temp);
                map.psal.push(list[i].psal);
            }
            return map;
        }

        var meas = [!{profile.measurements}];
        meas = collateMeasurements(meas);

        const getEmptyIdx = function(array) {
            var indices = [];
            var element = -999;
            var idx = array.indexOf(element);
            while (idx != -1) {
                indices.push(idx);
                idx = array.indexOf(element, idx + 1);
            }
            return(indices);
        }

        //-999 signify empty values. These need to be removed from the arrays that will be used to make traces.
        var temp = meas.temp;
        var psal = meas.psal;
        var pres = meas.pres;

        const getMaskForPair = function(arrayOne, arrayTwo) {
            let mask = [];
            const element = -999; // -999 is the actual nan value. -900 just in case of decimal
            for(let idx=0; idx < arrayOne.length; idx++){
                if (arrayOne[idx] === element || arrayTwo[idx] === element){
                    mask.push(false);
                }
                else {
                    mask.push(true)
                }
            }
            return(mask);
        }

        //Used to for pres vs psal. if temp reporting nan, psal should be zero too.
        const getMaskForTrio = function(arrayOne, arrayTwo, arrayThree) {
            let mask = [];
            const element = -999; // -999 is the actual nan value. -900 just in case of decimal
            for(let idx=0; idx < arrayOne.length; idx++){
                if (arrayOne[idx] === element || arrayTwo[idx] === element || arrayThree[idx] === element){
                    mask.push(false);
                }
                else {
                    mask.push(true)
                }
            }
            return(mask);
        }

        presVsTempMask = getMaskForPair(temp, pres);
        presVsPsalMask = getMaskForTrio(psal, pres, temp);
        tempVsPsalMask = getMaskForPair(psal, temp);

        presForTemp = pres.filter((item, i) => presVsTempMask[i]);
        tempForPres = temp.filter((item, i) => presVsTempMask[i]);

        presForPsal = pres.filter((item, i) => presVsPsalMask[i]);
        psalForPres = psal.filter((item, i) => presVsPsalMask[i]);

        psalForTemp = psal.filter((item, i) => tempVsPsalMask[i]);
        tempForPsal = temp.filter((item, i) => tempVsPsalMask[i]);


        console.log('pres v temp lengths should be equal')
        console.log(tempForPres.length);
        console.log(presForTemp.length);

        console.log('pres v psal lengths should be equal')
        console.log(presForPsal.length);
        console.log(psalForPres.length);

        console.log('psal v temp lengths should be equal')
        console.log(psalForTemp.length);
        console.log(tempForPsal.length);  

        const measurements = {'temp_v_psal': {'yvalue': tempForPsal, 'xvalue': psalForTemp, 'yaxis': 'y1', 'xaxis': 'x1'},
                                'pres_v_psal': {'yvalue': presForPsal, 'xvalue': psalForPres, 'yaxis': 'y2', 'xaxis': 'x2'},
                                'pres_v_temp': {'yvalue': presForTemp, 'xvalue': tempForPres, 'yaxis': 'y3', 'xaxis': 'x3'}
                                };

        const makeTrace =function(key) {
            meas = measurements[key];
            return {
                y: meas.yvalue,
                x: meas.xvalue,
                xaxis: meas.xaxis,
                yaxis: meas.yaxis,
                mode: 'markers',
                type: 'scatter',
                name: key
            };
        }

        const layout = {
            title: "Profile measurements",
            autosize: false,
            height: 400, 
            width: 1200, 

            xaxis3: {
                domain: [0, 0.266],
                autorange: true,
                title: "Temperature [Celsius]"
            }, 
            xaxis2: {
                domain: [.366, 0.633],
                autorange: true,
                title: "Salinity [psu]"
            }, 
            xaxis: {
                domain: [.733, 1],
                autorange: true, 
                title: "Salinity [psu]"
            },
            yaxis3: {
                anchor: "x3",
                autorange: 'reversed', 
                type: "linear", 
                title: "Pressure [dbar]"
            },  
            yaxis2: {
                anchor: "x2",
                autorange: 'reversed',
                title: "Pressure [dbar]",
            }, 
            yaxis: {
                anchor: "x1",
                autorange: true, 
                title: "Temperature [Celsius]"
            }, 
            hovermode: "closest", 
            showlegend: false
        };
        Plotly.plot('TPS_CHART', ['pres_v_temp', 'pres_v_psal', 'temp_v_psal'].map(makeTrace), layout);