doctype html
html(lang='en')
    head
        title=title
        meta(charset='utf-8')
        link(rel='stylesheet', href='/stylesheets/style.css')
        script(type="text/javascript", src='https://cdn.plot.ly/plotly-latest.min.js')
        link(rel='stylesheet', href='/stylesheets/external-css/bootstrap.css')
        script(src='/javascripts/external-js/FileSaver.min.js')
        script(src='/javascripts/external-js/jquery.min.js')
        script(src='/javascripts/external-js/bootstrap.min.js')
    body

    block content
        h1 Profile Id: #{title}
        p Date: #{moment(profile.date).format("YYYY-MM-DD HH:mm")}
        p Cycle number: #{profile.cycle_number}
        p Dac: #{profile.dac}
        p Parameters: #{profile.station_parameters}
        p Positioning system: #{profile.POSITIONING_SYSTEM}
        p Platform type: #{profile.PLATFORM_TYPE}
        p Data mode: #{profile.DATA_MODE}
        p Data source:
        a(href=profile.nc_url) #{profile.nc_url}
        p
        a(href='/catalog/platforms/'+ platform_number + '/page' target='_blank') To platform #{profile.platform_number} page
        div
        a(href='/map' ) To main page
        #TPS_CHART
        button.btn.btn-primary.btn-block(type='submit', id='downloadProfiles') Download data as JSON

    script(type='text/javascript').

        $('#downloadProfiles').on('click', function(){
            var url = '/catalog/profiles/' + `#{title}`;
            window.open(url,'_blank');
        });

        function collateMeasurements(list) {
                var map = {};
            var keys = Object.keys(list[0]);
            map.pres = [];
            map.temp = [];
            map.psal = [];

            for (var i = 0; i < list.length; ++i) {
                map.pres.push(list[i].pres);
                map.temp.push(list[i].temp);
                map.psal.push(list[i].psal);
            }
            return map;
        }

        const filterQCMeasurements = function(profile, qcThresh) {
            var filteredProfile = [];
            let num_measurements = profile.length;
            for (var i = 0; i < num_measurements; ++i) {
                var row = {};
                if (profile[i].pres_qc === qcThresh) {

                    row.pres = profile[i].pres;
                    if (profile[i].temp_qc === qcThresh) {
                        row.temp = profile[i].temp
                    }
                    else {
                        row.temp = ''
                    }
                    if (profile[i].psal_qc === qcThresh) {
                        row.psal = profile[i].psal
                    }
                    else {
                        row.psal = ''
                    }
                    filteredProfile.push(row)
                }
            }
            return filteredProfile;
        }

        var meas = [!{profile.measurements}];
        meas = filterQCMeasurements(meas, '1');
        meas = collateMeasurements(meas);
        const measurements = {'temp_v_psal': {'yvalue': meas.temp, 'xvalue': meas.psal, 'yaxis': 'y1', 'xaxis': 'x1'},
                                'pres_v_psal': {'yvalue': meas.pres, 'xvalue': meas.psal, 'yaxis': 'y2', 'xaxis': 'x2'},
                                'pres_v_temp': {'yvalue': meas.pres, 'xvalue': meas.temp, 'yaxis': 'y3', 'xaxis': 'x3'}
                                };

        const makeTrace =function(key) {
            meas = measurements[key];
            return {
                y: meas.yvalue,
                x: meas.xvalue,
                xaxis: meas.xaxis,
                yaxis: meas.yaxis,
                mode: 'markers',
                type: 'scatter',
                name: key
            };
        }

        const layout = {
            title: "Profile measurements",
            autosize: false,
            height: 400, 
            width: 1200, 

            xaxis3: {
                domain: [0, 0.266],
                autorange: true,
                title: "Temperature [Celsius]"
            }, 
            xaxis2: {
                domain: [.366, 0.633],
                autorange: true,
                title: "Salinity [psi]"
            }, 
            xaxis: {
                domain: [.733, 1],
                autorange: true, 
                title: "Salinity [psi]"
            },
            yaxis3: {
                anchor: "x3",
                autorange: 'reversed', 
                type: "linear", 
                title: "Pressure [dbar]"
            },  
            yaxis2: {
                anchor: "x2",
                autorange: 'reversed',
                title: "Pressure [dbar]",
            }, 
            yaxis: {
                anchor: "x1",
                autorange: true, 
                title: "Temperature [Celsius]"
            }, 
            hovermode: "closest", 
            showlegend: false
        };
        Plotly.plot('TPS_CHART', ['pres_v_temp', 'pres_v_psal', 'temp_v_psal'].map(makeTrace), layout);