doctype html
html(lang='en')
    head
        title=title
        meta(charset='utf-8')
        link(rel='stylesheet', href='/stylesheets/style.css')
        script(type="text/javascript", src='https://cdn.plot.ly/plotly-latest.min.js')
        link(rel='stylesheet', href='/stylesheets/external-css/bootstrap.css')
        script(src='/javascripts/external-js/FileSaver.min.js')
        script(src='/javascripts/external-js/jquery.min.js')
        script(src='/javascripts/external-js/bootstrap.min.js')
        script(src='/javascripts/bgc_functions.js')
    body

    block content
        div(class='selection_and_catalog_page')
            h1 BGC page for profile id: #{title}
            table(style='width:100%',border='0')
                tr
                    td Date: #{profileDate}
                    td Links to other Argovis pages:
                tr
                    td Cycle number: #{profile.cycle_number}
                    td 
                        a(href='/catalog/platforms/'+ platform_number + '/page' target='_blank') Link to platform #{profile.platform_number} page                                          
                tr
                    td Latitude: #{profile.strLat}
                    td 
                        a(href='/' ) Back to map                    
                tr
                    td Longitude: #{profile.strLon}
                    td
                        a(href='/catalog/profiles/'+ title + '/page' target='_blank') Back to core profile page
                tr
                    td Position QC: #{profile.position_qc}
                    td External links:                       
                tr
                    td Dac: #{profile.dac}
                    td 
                        a(href=profile.nc_url) Link to profile data on Argo GDAC   
                tr
                    td BGC Parameters: #{paramKeys}
                    td 
                        a(href=profile.ifremerProfile target='_blank') Link to Ifremer visualization of this profile
                tr
                    td Positioning system: #{profile.POSITIONING_SYSTEM}
                    td 
                        a(href=profile.jcompsPlatform target='_blank') Link to platform on JCOMMOPS
                tr
                    td Platform type: #{profile.PLATFORM_TYPE}
                tr
                    td Data mode: #{profile.DATA_MODE}
            button.btn.btn-primary.btn-block(type='submit', id='downloadProfiles') Download data as JSON
    div(class="grid-container", id='chart-grid')

    script(type='text/javascript').
        sp = '!{paramKeys}'
        sp = sp.split(',')
        sp = sp.filter(s => s)

        var parent = document.getElementById('chart-grid');
        plotDivs = {}
        for (idx in sp ){
            paramKey = sp[idx]
            if (paramKey==='pres') {continue}
            plotDivs[paramKey] = document.createElement('div');
            plotDivs[paramKey].setAttribute("id", paramKey+'_chart');
            
            parent.append(plotDivs[paramKey]);
        }

    script(type='text/javascript').
        var meas = [!{profile.bgcMeas}];
        meas = collateMeasurements(meas);
        pres = meas['pres']
        presQc = meas['pres_qc']
        delete meas['pres'];
        delete meas['pres_qc'];
        measKeys = findKeys(meas);
        qcKeys = measKeys.filter(s=>s.includes("_qc"));
        paramKeys = measKeys.filter(s=>!s.includes("_qc"));
        plotAxes = {}

        console.log(meas)

        console.log(paramKeys)

        for (idx in paramKeys) {
            
            if (!meas[paramKeys[idx]+'_qc']) { continue } //include param if param_qc exists
            presVsParamMask = getMaskForPair(meas[paramKeys[idx]], pres)
            presForParam = pres.filter((item, i) => presVsParamMask[i]);
            presQcForParam = presQc.filter((item, i) => presVsParamMask[i]);

            paramForPres = meas[paramKeys[idx]].filter((item, i) => presVsParamMask[i]);
            paramQcForPres = meas[paramKeys[idx]+'_qc'].filter((item, i) => presVsParamMask[i]);
            plotAxes[paramKeys[idx]] = { 'pres': presForParam.map(roundArray), 'pres_qc': presQcForParam, 'param': paramForPres.map(roundArray), 'qc': paramQcForPres}

        }

        traces = []
        let layout = {
            title: "Profile measurements",
            autosize: false,
            height: 400, 
            width: 400,
            hovermode: "closest", 
            showlegend: false
        }

        plotKeys = Object.keys(plotAxes)
        console.log(plotKeys)

        for (idx in plotKeys) {
            paramKey = plotKeys[idx]
            let traceParam = getTraceParams(paramKey, idx)
            traceParam['xvalues'] = plotAxes[paramKey].param
            traceParam['xqc'] = plotAxes[paramKey].qc
            traceParam['yvalues'] = plotAxes[paramKey].pres
            traceParam['yqc'] = plotAxes[paramKey].pres_qc
            
            trace = makeTrace(traceParam, paramKey)
            traces.push(makeTrace(traceParam, paramKey))

            xLabel = traceParam['xlabel'] + '[' + traceParam['xunits'] + ' ]'
            layout = makeLayout(traceParam['title'], xLabel, traceParam['yaxis'])

            div = document.getElementById(paramKey+'_chart')
            //Plotly.newPlot(div, trace, layout);

            Plotly.newPlot(div, [trace], layout);
        }
        //Plotly.plot('TPS_CHART', traces, layout);