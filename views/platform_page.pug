doctype html
html(lang='en')
    head
        title=title
        meta(charset='utf-8')
        link(rel='stylesheet', href='/stylesheets/style.css')
        script(type="text/javascript", src='https://cdn.plot.ly/plotly-latest.min.js')
        link(rel='stylesheet', href='/stylesheets/bootstrap.min.css')
        script(src='/javascripts/FileSaver.min.js')
        script(src='/javascripts/jquery.min.js')
        script(src='/javascripts/bootstrap.min.js')
        script(src='/javascripts/tableexport.min.js')
        link(rel='stylesheet', href='tableexport.min.css')
    body

    block content
        div(class='top')
            #pres_v_temp_plot
        div(class='bottom')
            #pres_v_psal_plot

        button.btn.btn-primary.btn-block(type='submit', id='downloadProfiles') Download platform data
        div
        table(class="table table-striped", id='profileTable')
            thead
                tr
                    th Raw Data
                    th Dac
                    th Parameters
                    th Link to profile page
                    th Date reported
                    th Cycle number
                    th Number of measurements
            tbody(overflow='auto', height='150px')
                each profile, i in JSON.parse(profiles)
                    tr
                        td 
                            a(href=profile.nc_url) #{profile._id} data
                        td #{profile.dac}
                        td #{profile.station_parameters}
                        td 
                            a(href='/catalog/profiles/'+profile._id + '/page' target='_blank') #{profile._id} page
                        td #{moment(profile.date).format("YYYY-MM-DD HH:mm")}
                        td #{profile.cycle_number}
                        td #{profile.measurements.length}

    script(type='text/javascript').

        TableExport(document.getElementsByTagName("table"), {
            headers: true,                              // (Boolean), display table headers (th or td elements) in the <thead>, (default: true)
            footers: true,                              // (Boolean), display table footers (th or td elements) in the <tfoot>, (default: false)
            formats: ['csv', 'xlsx', 'xls', 'txt'],             // (String[]), filetype(s) for the export, (default: ['xls', 'csv', 'txt'])
            filename: !{title}+'_table',                             // (id, String), filename for the downloaded file, (default: 'id')
            bootstrap: true,                           // (Boolean), style buttons using bootstrap, (default: true)
            exportButtons: true,                        // (Boolean), automatically generate the built-in export buttons for each of the specified formats (default: true)
            position: 'bottom',                         // (top, bottom), position of the caption element relative to table, (default: 'bottom')
            ignoreRows: null,                           // (Number, Number[]), row indices to exclude from the exported file(s) (default: null)
            ignoreCols: null,                           // (Number, Number[]), column indices to exclude from the exported file(s) (default: null)
            trimWhitespace: true                        // (Boolean), remove all leading/trailing newlines, spaces, and tabs from cell text in the exported file(s) (default: false)
        });

    script(type='text/javascript').

        let combinedProfiles = {};
        combinedProfiles.psal = [];
        combinedProfiles.pres = [];
        combinedProfiles.temp = [];
        combinedProfiles.cycle = [];
        let profiles = !{profiles};


        $('#downloadProfiles').on('click', function(){
            var url = '/catalog/platforms/' + `#{title}`;
            console.log(url);
            window.open(url,'_blank');
        });

        const collateProfileMeasurements = function(profile) {
            var collatedProfiles = {};
            let num_measurements = profile.length;
            collatedProfiles.pres = new Array(num_measurements);
            collatedProfiles.temp = new Array(num_measurements);
            collatedProfiles.psal = new Array(num_measurements);

            for (var i = 0; i < num_measurements; ++i) {
                collatedProfiles.pres[i] = profile[i].pres;
                collatedProfiles.temp[i] = profile[i].temp;
                collatedProfiles.psal[i] = profile[i].psal;
            }
            return collatedProfiles;
        }

        const reduceProfileMeasurements = function(combinedProfiles, n) {
            var reducedProfiles = {}

            reducedProfiles.pres = [];
            reducedProfiles.temp = [];
            reducedProfiles.psal = [];
            reducedProfiles.cycle = [];

            for(let i = 0; i < combinedProfiles.pres.length; i+=n) {
                reducedProfiles.pres.push(combinedProfiles.pres[i]);
                reducedProfiles.temp.push(combinedProfiles.temp[i]);
                reducedProfiles.psal.push(combinedProfiles.psal[i]);
                reducedProfiles.cycle.push(combinedProfiles.cycle[i]);
            }
            return reducedProfiles;
            }


        for(var i=0; i < profiles.length; i++) {
            let profile = profiles[i].measurements;

            profile = collateProfileMeasurements(profile);
            combinedProfiles.psal = combinedProfiles.psal.concat(profile.psal);
            combinedProfiles.pres = combinedProfiles.pres.concat(profile.pres);
            combinedProfiles.temp = combinedProfiles.temp.concat(profile.temp);

            let meas_idx = [];
            for (var j = 1; j <= profile.psal.length; j++) {
                meas_idx.push(profiles[i].cycle_number); //just an array of cycle number
            }
            combinedProfiles.cycle = combinedProfiles.cycle.concat(meas_idx);
        };
        //plot no more that 3000 points. scattergl option can plot more points, but there is a but that makes the y-axis tick marks dissapear.
        nFactor = Math.ceil(combinedProfiles.pres.length / 10000);
        console.log(nFactor);
        combinedProfiles = reduceProfileMeasurements(combinedProfiles, nFactor);
        console.log(combinedProfiles.pres.length);
        var temp_scl = [[0.0, 'rgb(3, 35, 51)'],
                        [0.125, 'rgb(24, 51, 124)'],
                        [0.25, 'rgb(86, 59, 156)'],
                        [0.375, 'rgb(130, 79, 142)'],
                        [0.5, 'rgb(176, 95, 129)'],
                        [0.625, 'rgb(222, 112, 100)'],
                        [0.75, 'rgb(249, 147, 65)'],
                        [0.875, 'rgb(249, 198, 65)'],
                        [1.0, 'rgb(231, 250, 90)']];

        var psal_scl = [[0.0, 'rgb(41, 24, 107)'],
                        [0.125, 'rgb(31, 51, 161)'],
                        [0.25, 'rgb(15, 91, 144)'],
                        [0.375, 'rgb(40, 119, 137)'],
                        [0.5, 'rgb(59, 147, 135)'],
                        [0.625, 'rgb(79, 176, 125)'],
                        [0.75, 'rgb(122, 203, 102)'],
                        [0.875, 'rgb(195, 221, 100)'],
                        [1.0, 'rgb(253, 238, 153)']];

        const measurements = {'yvalues': combinedProfiles.pres,
                                'xvalues': combinedProfiles.cycle,
                                'pres_v_temp': {'cvalues': combinedProfiles.temp,
                                                'text': 'temperature: ',
                                                'yaxis': 'y2',
                                                'xaxis': 'x1',
                                                'colorscale': temp_scl,
                                                'colorbar': {
                                                        //y: 0.8, 
                                                        //x: 1.02, 
                                                        title: "Temperature [Celsius]", 
                                                        len: 1, 
                                                        yanchor: "middle"
                                                        }},
                                'pres_v_psal': {'cvalues': combinedProfiles.psal,
                                                'text': 'salinity: ',
                                                'yaxis': 'y1',
                                                'xaxis': 'x1',
                                                'colorscale': psal_scl,
                                                'colorbar': {
                                                        //y: 0.2, 
                                                        //x: 1.02, 
                                                        title: "Salinity [ppm]", 
                                                        len: 1, 
                                                        yanchor: "middle"
                                                        }}
                                };
        //scatterGL has difficulty with long decimal points when distinguishing color
        function roundArray(value){return(value.toFixed(1))}

        const makeText = function(text, value) {
                return("<br> " + text + value.toFixed(3).toString()
                     + "<br>click to see profile page"
                )
        };


        const makeTrace = function(key) {
            let meas = measurements[key];
            scatterTrace = {
                y: measurements.yvalues,
                x: measurements.xvalues,
                text: meas.cvalues.map(function(value) { return makeText(meas.text, value); }),
                showlegend: false,
                type: 'scatter',
                mode: 'markers',
                marker: { color: meas.cvalues,
                            size: 5,
                            symbol: 'dot',
                            opacity: 1,
                            reversescale: false,
                            colorscale: meas.colorscale,
                            colorbar: meas.colorbar,
                        },
                name: key, 
            }
            return [scatterTrace];
        };


        var temp_layout = {
            title: "Profile measurements",  
            height: 400, 
            width: 1200, 
            //autosize: false, 
            yaxis: {
                showticklabels: true,
                autorange: 'reversed', 
                type: "linear", 
                title: "Pressure [dbar]"
            },
            xaxis: {
                autorange: true, 
                type: "linear", 
                title: "Cycle"
            }, 
            hovermode: "closest", 
            showlegend: true
        };

        var psal_layout = {
            title: "Profile measurements",  
            height: 400, 
            width: 1200, 
            //autosize: false, 
            yaxis: {
                showticklabels: true, 
                autorange: 'reversed',
                type: "linear", 
                title: "Pressure [dbar]"
            },
            xaxis: {
                autorange: true, 
                type: "linear", 
                title: "Cycle"
            }, 
            hovermode: "closest", 
            showlegend: true
        };
        Plotly.plot('pres_v_temp_plot',
                    makeTrace( 'pres_v_temp'),
                    temp_layout);
        Plotly.plot('pres_v_psal_plot', 
                    makeTrace('pres_v_psal'),
                    psal_layout);

        // Upon click a new tab opens to the corresponding profile.
        pres_v_temp_plot.on('plotly_click', function(data){
            let xidx = data.points[0].pointNumber
            var profile_id = !{title} + '_' + data.points[0].data.x[xidx];
            var url = '/catalog/profiles/' + profile_id + '/page';
            window.open(url,'_blank');
        });
        pres_v_psal_plot.on('plotly_click', function(data){
            let xidx = data.points[0].pointNumber
            var profile_id = !{title} + '_' + data.points[0].data.x[xidx];
            var url = '/catalog/profiles/' + profile_id + '/page';
            window.open(url,'_blank');
        });
        
