doctype html
html(lang='en')
    head
        title=title
        meta(charset='utf-8')
        link(rel='stylesheet', href='/stylesheets/style.css')
        script(type="text/javascript", src='https://cdn.plot.ly/plotly-latest.min.js')
    body

    block content
        div
        table(class="tableSection")
            thead
                tr
                    th Platform Id
                    th Date
                    th Cycle number
                    th Number of measurements
            tbody(overflow='auto', height='150px')
                each profile, i in JSON.parse(profiles)
                    tr
                        td 
                            a(href=profile.nc_url) #{profile._id}
                        td #{profile.date}
                        td #{profile.cycle_number}
                        td #{profile.measurements.temp.length}  
        #TS_PROFILES

        script(type='text/javascript').
         
            let psal = [];
            let pres = [];
            let temp = [];
            let cycle = [];
            let profiles = !{profiles};
            let psal_max = 0;
            let psal_min = 100;
            let temp_max = 0;
            let temp_min = 100;
            for(var i=0; i < profiles.length; i++) {
                let profile = profiles[i];
                //convert nan to 0
                let psal_array = profile.measurements.psal;
                let pres_array = profile.measurements.pres;
                let temp_array = profile.measurements.temp;
                temp_array_max = Math.max.apply(null, temp_array.filter(Number));
                temp_array_min = Math.min.apply(null, temp_array.filter(Number));
                psal_array_max = Math.max.apply(null, psal_array.filter(Number));
                psal_array_min = Math.min.apply(null, psal_array.filter(Number));
                //console.log('temp_array_min: %s', temp_array_min);
                //console.log('psal_array_min: %s', psal_array_min);
                if (temp_array_max > temp_max) { temp_max = temp_array_max;}
                if (temp_array_min < temp_min) { temp_min = temp_array_min;}
                if (psal_array_max > psal_max) { psal_max = psal_array_max;}
                if (psal_array_min < psal_min) { psal_min = psal_array_min;}
                psal = psal.concat(psal_array);
                pres = pres.concat(pres_array);
                temp = temp.concat(temp_array);

                let meas_idx = [];
                for (var j = 1; j <= pres_array.length; j++) {
                meas_idx.push(i); //just an array of cycle number
                }
                cycle = cycle.concat(meas_idx);
            };
            
            function round_array(x){return(x.toFixed(2))}

            function scale_array(x, xmax, xmin){return( (x-xmin)/(xmax-xmin) )}

            function normalize(min, max) {
                var delta = max - min;
                return function (val) {
                    return (val - min) / delta;
                };
            }




            //noneCoords = pres.findIndex(getNoneCoords)

            //console.log(temp.length)
            //console.log(psal.length)
            //console.log(pres.length)
            //pres[ pres.map(getNoneCoords)]

            temp_color = temp.map(normalize(temp_min, temp_max));
            //temp_color = temp_color.map(unnormalize(temp_min, temp_max));
            //temp_color = temp_color.map(round_array);

            //console.log(temp_color);
            
            var temp_scl = [[0, 'rgb(215,48,39)'],
                              [.125, 'rgb(244,109,67)'],
                              [.25, 'rgb(253,174,97)'],
                              [.375, 'rgb(254,224,144)'],
                              [.5, 'rgb(255,255,191)'],
                              [.625, 'rgb(224,243,248)'],
                              [.75, 'rgb(171,217,233)'],
                              [.875, 'rgb(116,173,209)'],
                              [1, 'rgb(69,117,180)']];

            var psal_scl = [[0, 'rgb(166,97,26)'],
                            [.25, 'rgb(223,194,125)'],
                            [.5, 'rgb(245,245,245)'],
                            [.75, 'rgb(128,205,193)'],
                            [1, 'rgb(1,133,113)']];

            const measurements = {'yvalues': pres,
                                  'xvalues': cycle,
                                  'pres_v_temp': {'cvalues': temp,
                                                  'yaxis': 'y2',
                                                  'xaxis': 'x1',
                                                  'cmin': 0,
                                                  'cmax': 1,
                                                  'colorscale': temp_scl,
                                                  'colorbar': {
                                                            y: 0.8, 
                                                            x: 1.02, 
                                                            title: "Temperature [Celsius]", 
                                                            len: 0.35, 
                                                            yanchor: "middle"
                                                            }},
                                  'pres_v_psal': {'cvalues': psal,
                                                  'yaxis': 'y1',
                                                  'xaxis': 'x1',
                                                  'cmin': psal_min,
                                                  'cmax': psal_max,
                                                  'colorscale': psal_scl,
                                                  'colorbar': {
                                                            y: 0.2, 
                                                            x: 1.02, 
                                                            title: "Salinity [ppm]", 
                                                            len: 0.35, 
                                                            yanchor: "middle"
                                                            }}
                                 };

            const makeTrace =function(key) {
                let meas = measurements[key];
                return {
                    y: measurements.yvalues,
                    x: measurements.xvalues,
                    text: meas.cvalues,
                    xaxis: meas.xaxis,
                    yaxis: meas.yaxis,
                    showlegend: false,
                    type: 'scattergl',
                    mode: 'markers',
                    marker: { color: meas.cvalues,
                              size: 8,
                              symbol: 'dot',
                              opacity: 1,
                              reversescale: true,
                              colorscale: meas.colorscale,
                              colorbar: meas.colorbar,
                            },
                    name: key, 
                };
            };

            var layout = {
                title: "Profile measurements", 
                anchor: "y2", 
                height: 800, 
                width: 1200, 
                autosize: false, 
                yaxis: {
                    autorange: 'reversed', 
                    type: "linear", 
                    domain: [
                        0, 
                        0.45
                    ], 
                    title: "Pressure [dbar]"
                },
                yaxis2: {
                    autorange: 'reversed', 
                    type: "linear",                     
                    domain: [
                        0.55, 
                        1
                    ], 
                    title: "Pressure [dbar]", 
                    side: "left",
                }, 
                xaxis: {
                    autorange: true, 
                    type: "linear", 
                    anchor: "x", 
                    title: "Cycle"
                }, 
                hovermode: "closest", 
                showlegend: true
            };
            console.log('temp max: %s min: %s',temp_max, temp_min);
            console.log('psal max: %s min: %s',psal_max, psal_min);
            Plotly.plot('TS_PROFILES',
                        ['pres_v_psal', 'pres_v_temp'].map(makeTrace),
                        layout);
