doctype html
html(lang='en')
    head
        title=title
        meta(charset='utf-8')
        link(rel='stylesheet', href='/stylesheets/style.css')
        script(type="text/javascript", src='https://cdn.plot.ly/plotly-latest.min.js')
        link(rel='stylesheet', href='/stylesheets/external-css/bootstrap.css')
        link(rel='stylesheet', href='/stylesheets/external-css/bootstrap-table.css')
        script(src='/javascripts/external-js/FileSaver.min.js')
        script(src='/javascripts/external-js/jquery.min.js')
        script(src='/javascripts/external-js/bootstrap.min.js')
        script(src='/javascripts/external-js/tableexport.min.js')
        script(src="/javascripts/external-js/moment.min.js")
        script(src="/javascripts/external-js/bootstrap-table.js")
    body

    block content
        div(class='selection_and_catalog_page')
            div(class='horizContainer')
                div(class='top')
                    #pres_v_temp_plot
                div(class='bottom')
                    #pres_v_psal_plot
            p Disclaimer: profiles with Iridium (Positioning System GPS) plot only 200 points max.
            button.btn.btn-primary.btn-block(type='submit', id='downloadProfiles') Download data as JSON
            div(class='top')
                a(href='/catalog/platforms/'+ title + '/page2' target='_blank') To platform PT, PS, and TS plot pages
            div(class='middle')
                a(href='http://www.jcommops.org/board/wa/Platform?ref='+ title target='_blank') To JCOMMOPS page
            div(class='bottom')
                a(href='/map' ) To main page
            //- table(class="table sortable", id='profileTable')
            table(class="table-striped", data-toggle="table", id='profileTable')
                thead(height='50px')
                    tr
                        th Link to GDAC data
                        th Dac
                        th Parameters
                        th Positioning system
                        th(data-sortable='true' data-sorter="latSorter") Lat
                        th(data-sortable='true' data-sorter="lonSorter") Lon
                        th Link to profile page
                        th(data-sortable='true') Date reported
                        th(data-sortable='true') Cycle number
                        th(data-sortable='true') Data mode
                        th(data-sortable='true') Num. of meas.
                tbody(overflow='auto', height='150px')
                    each profile, i in JSON.parse(profiles)
                        tr
                            td 
                                a(href=profile.nc_url) #{profile._id} data
                            td #{profile.dac}
                            td #{profile.formatted_station_parameters}
                            td #{profile.POSITIONING_SYSTEM}
                            td #{profile.strLat}
                            td #{profile.strLon}
                            td 
                                a(href='/catalog/profiles/'+profile._id + '/page' target='_blank') #{profile._id} page
                            td #{moment.utc(profile.date).format("YYYY-MM-DD HH:mm")}
                            td #{profile.cycle_number}
                            td #{profile.DATA_MODE}
                            td #{profile.measurements.length}

    script(type='text/javascript').

        function latSorter(a, b) {
            aNS = a.slice(-1);
            bNS = b.slice(-1);
            aNum = Number(a.slice(0, -2));
            bNum = Number(b.slice(0, -2));
            if (aNS == 'S') { aNum = -1*Number(aNum) }
            if (bNS == 'S') { bNum = -1*Number(bNum) }
            if (aNum < bNum) return -1;
            if (aNum > bNum) return 1;
            return 0;
        }

        function lonSorter(a, b) {
            aNS = a.slice(-1);
            bNS = b.slice(-1);
            aNum = Number(a.slice(0, -2));
            bNum = Number(b.slice(0, -2));
            if (aNS == 'E') { aNum = -1*Number(aNum) }
            if (bNS == 'E') { bNum = -1*Number(bNum) }
            if (aNum < bNum) return -1;
            if (aNum > bNum) return 1;
            return 0;
        }

        TableExport(document.getElementsByTagName("table"), {
            headers: true,                              // (Boolean), display table headers (th or td elements) in the <thead>, (default: true)
            footers: true,                              // (Boolean), display table footers (th or td elements) in the <tfoot>, (default: false)
            formats: ['csv', 'xlsx', 'xls', 'txt'],             // (String[]), filetype(s) for the export, (default: ['xls', 'csv', 'txt'])
            filename: !{title}+'_table',                             // (id, String), filename for the downloaded file, (default: 'id')
            bootstrap: true,                           // (Boolean), style buttons using bootstrap, (default: true)
            exportButtons: true,                        // (Boolean), automatically generate the built-in export buttons for each of the specified formats (default: true)
            position: 'bottom',                         // (top, bottom), position of the caption element relative to table, (default: 'bottom')
            ignoreRows: null,                           // (Number, Number[]), row indices to exclude from the exported file(s) (default: null)
            ignoreCols: null,                           // (Number, Number[]), column indices to exclude from the exported file(s) (default: null)
            trimWhitespace: true                        // (Boolean), remove all leading/trailing newlines, spaces, and tabs from cell text in the exported file(s) (default: false)
        });

        $('#downloadProfiles').on('click', function(){
            var url = '/catalog/platforms/' + `#{title}`;
            window.open(url,'_blank');
        });

    script(type='text/javascript').

        let psal = [];
        let pres = [];
        let temp = [];
        let time = [];
        let cycle = [];
        let profiles = !{profiles};

        const collateProfileMeasurements = function(profile) {
            var collatedProfiles = {};
            let num_measurements = profile.length;
            collatedProfiles.pres = new Array(num_measurements);
            collatedProfiles.temp = new Array(num_measurements);
            collatedProfiles.psal = new Array(num_measurements);

            for (var i = 0; i < num_measurements; ++i) {
                collatedProfiles.pres[i] = profile[i].pres;
                collatedProfiles.temp[i] = profile[i].temp;
                collatedProfiles.psal[i] = profile[i].psal;
            }
            return collatedProfiles;
        }

        const reduceGPSMeasurements = function(profile, maxLength) {
            if (profile.POSITIONING_SYSTEM === 'GPS') {
                mLen = profile.measurements.length;
                if (mLen > maxLength) {
                    //reduce array length to so that only every delta element is plotted
                    var delta = Math.floor( mLen / maxLength );
                    var reducedMeasurements = [];
                    for (var j = 0; j < mLen; j=j+delta) {
                        reducedMeasurements.push(profile.measurements[j]);
                    }
                    return reducedMeasurements;
                }
                else {
                    return profile.measurements;
                }
            }
            else {
                return profile.measurements;
            }
        }

        const dropNegNineNineNine = function(value){ if (value != -999) {return(value)}};
        const roundArray = function (value){ return(Number(value).toFixed(3)) };


        for(var i=0; i < profiles.length; i++) {
            var profileMeas = reduceGPSMeasurements(profiles[i], 200);
            profileMeas = collateProfileMeasurements(profileMeas);
            psal = psal.concat(profileMeas.psal);
            pres = pres.concat(profileMeas.pres);
            temp = temp.concat(profileMeas.temp);

            let profTime = [];
            var cycleIdx = [];
            for (var j=0; j<profileMeas.pres.length; j++) {
                profTime.push(moment.utc(profiles[i].date).format('YYYY-MM-DD HH:mm'))
                cycleIdx.push(profiles[i].cycle_number); //just an array of cycle number
            }
            time = time.concat(profTime);
            cycle = cycle.concat(cycleIdx);
        };

        const getMaskForPair = function(arrayOne, arrayTwo) {
            let mask = [];
            const element = -999; // -999 is the actual nan value. -900 just in case of decimal
            for(let idx=0; idx < arrayOne.length; idx++){
                if (arrayOne[idx] === element || arrayTwo[idx] === element){
                    mask.push(false);
                }
                else {
                    mask.push(true)
                }
            }
            return(mask);
        }

        //Used to for pres vs psal. if temp reporting nan, psal should be zero too.
        const getMaskForTrio = function(arrayOne, arrayTwo, arrayThree) {
            let mask = [];
            const element = -999; // -999 is the actual nan value. -900 just in case of decimal
            for(let idx=0; idx < arrayOne.length; idx++){
                if (arrayOne[idx] === element || arrayTwo[idx] === element || arrayThree[idx] === element){
                    mask.push(false);
                }
                else {
                    mask.push(true)
                }
            }
            return(mask);
        }

        //filter using Tyler's algorithm
        presVsTempMask = getMaskForPair(temp, pres);
        presVsPsalMask = getMaskForTrio(psal, pres, temp);

        presForTemp = pres.filter((item, i) => presVsTempMask[i]);
        tempForPres = temp.filter((item, i) => presVsTempMask[i]);
        cycleForTemp = cycle.filter((item, i) => presVsTempMask[i]);
        timeForTemp = time.filter((item, i) => presVsTempMask[i]);

        presForPsal = pres.filter((item, i) => presVsPsalMask[i]);
        psalForPres = psal.filter((item, i) => presVsPsalMask[i]);
        cycleForPsal = cycle.filter((item, i) => presVsPsalMask[i]);
        timeForPsal = time.filter((item, i) => presVsPsalMask[i]);
        var tempScl = [[0.0, 'rgb(3, 35, 51)'],
                        [0.125, 'rgb(24, 51, 124)'],
                        [0.25, 'rgb(86, 59, 156)'],
                        [0.375, 'rgb(130, 79, 142)'],
                        [0.5, 'rgb(176, 95, 129)'],
                        [0.625, 'rgb(222, 112, 100)'],
                        [0.75, 'rgb(249, 147, 65)'],
                        [0.875, 'rgb(249, 198, 65)'],
                        [1.0, 'rgb(231, 250, 90)']];

        var psalScl = [[0.0, 'rgb(41, 24, 107)'],
                        [0.125, 'rgb(31, 51, 161)'],
                        [0.25, 'rgb(15, 91, 144)'],
                        [0.375, 'rgb(40, 119, 137)'],
                        [0.5, 'rgb(59, 147, 135)'],
                        [0.625, 'rgb(79, 176, 125)'],
                        [0.75, 'rgb(122, 203, 102)'],
                        [0.875, 'rgb(195, 221, 100)'],
                        [1.0, 'rgb(253, 238, 153)']];

        const measurements = {'pres_v_temp': {'xvalues': timeForTemp,
                                                'yvalues': presForTemp.map(roundArray),
                                                'cvalues': tempForPres.map(roundArray),
                                                'text': 'temperature: ',
                                                'yaxis': 'y2',
                                                'xaxis': 'x1',
                                                'units': 'C',
                                                'cycle': cycleForTemp,
                                                'colorscale': tempScl,
                                                'colorbar': {
                                                        title: "Temperature [Celsius]", 
                                                        len: 1, 
                                                        yanchor: "middle"
                                                        }},
                                'pres_v_psal': {'xvalues': timeForPsal,
                                                'yvalues': presForPsal.map(roundArray),
                                                'cvalues': psalForPres.map(roundArray),
                                                'text': 'salinity: ',
                                                'yaxis': 'y1',
                                                'xaxis': 'x1',
                                                'units': 'psu',
                                                'cycle': cycleForPsal,
                                                'colorscale': psalScl,
                                                'colorbar': {
                                                        title: "Salinity [psu]", 
                                                        len: 1, 
                                                        yanchor: "middle"
                                                        }}
                                };

        const makeText = function(pres, date, text, value, units, cycle) {
                return("<br>" + text + value.toString() + " " + units
                     + "<br>date: " + date.toString()
                     + "<br>pressure: " + pres.toString() + " dbar"
                     + "<br>cycle: " + cycle.toString()
                     + "<br>click to see profile page"
                )
        };

        const makeTrace = function(key) {
            let meas = measurements[key];
            //let hovorText = meas.cvalues.map(function(value) { return makeText(meas.text, value); });
            //hovorText = meas.cycle.map(function(value) return)
            let hovorText = [];
            for(let idx=0; idx < meas.cvalues.length; idx++){
                let pointText = makeText(meas.yvalues[idx], meas.xvalues[idx], meas.text, meas.cvalues[idx], meas.units, meas.cycle[idx])
                hovorText.push(pointText);
            }
            scatterTrace = {
                y: meas.yvalues,
                x: meas.xvalues,
                text: hovorText,
                hoverinfo: 'text',
                showlegend: false,
                type: 'scattergl',
                mode: 'markers',
                cycle: meas.cycle,
                marker: { color: meas.cvalues,
                            size: 5,
                            symbol: 'dot',
                            opacity: 1,
                            reversescale: false,
                            colorscale: meas.colorscale,
                            colorbar: meas.colorbar,
                        },
                name: key, 
            }
            return [scatterTrace];
        };

        var temp_layout = {
            title: "Temperature measurements",  
            height: 400, 
            width: 1200, 
            //autosize: false, 
            yaxis: {
                showticklabels: true,
                autorange: 'reversed', //scattergl currently does not show tick labels when axis is reversed
                type: "linear", 
                title: "Pressure [dbar]"
            },
            xaxis: {
                autorange: true, 
                type: "date", 
                title: "Date"
            }, 
            hovermode: "closest", 
            showlegend: true
        };

        var psal_layout = {
            title: "Salinity measurements",  
            height: 400, 
            width: 1200, 
            //autosize: false, 
            yaxis: {
                showticklabels: true, 
                autorange: 'reversed', //scattergl currently does not show tick labels when axis is reversed
                type: "linear", 
                title: "Pressure [dbar]"
            },
            xaxis: {
                autorange: true, 
                type: "date", 
                title: "Date"
            }, 
            hovermode: "closest", 
            showlegend: true
        };
        Plotly.plot('pres_v_temp_plot',
                    makeTrace( 'pres_v_temp'),
                    temp_layout);
        Plotly.plot('pres_v_psal_plot', 
                    makeTrace('pres_v_psal'),
                    psal_layout);

        // Upon click a new tab opens to the corresponding profile.
        pres_v_temp_plot.on('plotly_click', function(data){
            let xidx = data.points[0].pointNumber
            let cycle_num = data.points[0].data.cycle[xidx];
            var profile_id = !{title} + '_' + cycle_num;
            var url = '/catalog/profiles/' + profile_id + '/page';
            window.open(url,'_blank');
        });

        pres_v_psal_plot.on('plotly_click', function(data){
            let xidx = data.points[0].pointNumber
            let cycle_num = data.points[0].data.cycle[xidx];
            var profile_id = !{title} + '_' + cycle_num;
            var url = '/catalog/profiles/' + profile_id + '/page';
            window.open(url,'_blank');
        });